import cv2
import numpy as np

img = cv2.imread("./missingSegments.png")
img =  cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
low = np.array([0,0,0])
high = np.array([1,1,1])
mask = cv2.inRange(img,low,high)
kernel  = np.ones((8,8), np.uint8)
erosion = cv2.erode(mask,kernel,iterations = 1)

contours, _ = cv2.findContours(erosion, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
# inverting to iterate correctly, since first occurence of the element
# we want starts at the end of the tuple
contours = contours[::-1]

# pixel spacing in between each segment
spacing = 100
# starting pixel points for first horizontal segment
start_x = 111
start_y = 98

# Lists to reference to give all segments names
cols = ['A', 'B', 'C', 'D', 'E', 'F', 'G']
rows = [1, 2, 3, 4, 5, 6, 7]

# Where segments will be stored, key is segment name, i.e (E4,F4)
# value for each key is either True (semgment found) or False (missing Segment)
horizontal_seg = dict()
vertical_seg = dict()

# reference index for coordinates found in contours
# to keep track where we are at during the for loop iteartion
# it is only incrased when we find the coordinates, which means the link/segment
# is found, otherwise it's false and we keep checking until is True again
ind = 0
# The coordinates for the pixels will have to be inverted when checking
# for vertical segments, so keeping a reference 
x = start_x
y = start_y

#  Main loop, iterates through all Segments, wheather missing or not
# starting with the first row, i.e. row 1
for i in range(7):
    
    # Iterating only through horizontal segments in current row
    for j in range(6):
        # Horizontal segments found here
        if (x,y) in contours[ind]:
            
            if j == 6:
                horizontal_seg[f"({cols[j-1]}{rows[i]},{cols[j]}{rows[i]})"] = True
            else:
                horizontal_seg[f"({cols[j]}{rows[i]},{cols[j+1]}{rows[i]})"] = True
            ind += 1
            
        else:
            if j == 6:
                horizontal_seg[f"({cols[j-1]}{rows[i]},{cols[j]}{rows[i]})"] = False
            else:
                horizontal_seg[f"({cols[j]}{rows[i]},{cols[j+1]}{rows[i]})"] = False

        x += spacing

    # break iteration after this b/ no more coordinate to go
    # through in contours after last horizontal segment is found
    if ind == 72:
        break
    # inverting coords for vertical segments
    x,y = start_y, start_x

    # Iterating only through vertical segments in current row (i)
    for k in range(7):
        
        if i == 6:
            i = 5
        
        # vertical coord found here
        if (x,y) in contours[ind]:
            if k == 6:
                vertical_seg[f"({cols[k]}{rows[i]},{cols[k]}{rows[i+1]})"] = True
            else:
                vertical_seg[f"({cols[k]}{rows[i]},{cols[k]}{rows[i+1]})"] = True
            ind += 1
            
        else:
            if k == 6:
                vertical_seg[f"({cols[k]}{rows[i]},{cols[k]}{rows[i+1]})"] = False
            else:
                vertical_seg[f"({cols[k]}{rows[i]},{cols[k]}{rows[i+1]})"] = False

        x += spacing
    # reset x and y to their original starting point
    # this will enable to correctly match horizontal segments based on pixels
    x = start_x
    y = start_y
    # add spacing to Y to move down a row in the next iteration
    y += spacing

print("Missing horizontal links")
for k,v in horizontal_seg.items():
    if v == False:
        print(k)
print("Missing Vertical link")
for k,v in vertical_seg.items():
    if v == False:
        print(k)
