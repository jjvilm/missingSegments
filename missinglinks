import cv2
import numpy as np

img = cv2.imread("./missingSegments.png")
img =  cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
low = np.array([0,0,0])
high = np.array([1,1,1])
mask = cv2.inRange(img,low,high)
kernel  = np.ones((8,8), np.uint8)
erosion = cv2.erode(mask,kernel,iterations = 1)

contours, _ = cv2.findContours(erosion, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
# cv2.drawContours(img, coentours, -1, (0,255,0), 2)



# cv2.imshow("img", img)
# cv2.waitKey(0)
# cv2.destroyAllWindows()
segment_width = 79
segment_gap = 21
spacing = 100
start_x = 111
start_y = 98

contours = contours[::-1]

# for cnt in contours:
#     print(cnt)
#     print(cv2.contourArea(cnt))
#     cv2.drawContours(img, [cnt], 0, (0,255,0), 3)
#     cv2.imshow("img", img)
#     cv2.waitKey(0)
#     cv2.destroyAllWindows()
 

# print(contours[0])


cols = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
rows = [1, 2, 3, 4, 5, 6, 7]
missing_segment = dict()
# check row segments first

# reference inital coords
ind = 0

x = start_x
y = start_y
#  check rows 1-7 first, starting w/ segment A-B
for i in range(7):

    for j in range(6):

        if (x,y) in contours[ind]:
            # if on last element of list
            if j == 6:
                missing_segment[f"{rows[i]}_{cols[j-1]}{cols[j]}"] = True
            else:
                missing_segment[f"{rows[i]}_{cols[j]}{cols[j+1]}"] = True
            ind += 1
            
        else:
            if j == 6:
                missing_segment[f"{rows[i]}_{cols[j-1]}{cols[j]}"] = False
            else:
                missing_segment[f"{rows[i]}_{cols[j]}{cols[j+1]}"] = False

        x += spacing

    # iterating through colums, so A-G in current row
    print("\nGoing to new iteration", ind)
    if ind == 72:
        break
    # inverting coords for vertical segments
    x,y = start_y, start_x
    for k in range(7):
        if i == 6:
            i = 5
        
        # coord matched here
        if (x,y) in contours[ind]:
            if k == 6:
                missing_segment[f"{cols[k]}_{rows[i]}{rows[i+1]}"] = True
            else:
                missing_segment[f"{cols[k]}_{rows[i]}{rows[i+1]}"] = True
            ind += 1
            
        else:
            if k == 6:
                missing_segment[f"{cols[k]}_{rows[i]}{rows[i+1]}"] = False
            else:
                missing_segment[f"{cols[k]}_{rows[i]}{rows[i+1]}"] = False
            print(ind)

       
        x += spacing
    # reset x and y
    x = start_x
    y = start_y
    # add spacing to Y
    y += spacing

print(missing_segment)
for k,v in missing_segment.items():
    if v == False:
        print(k)
